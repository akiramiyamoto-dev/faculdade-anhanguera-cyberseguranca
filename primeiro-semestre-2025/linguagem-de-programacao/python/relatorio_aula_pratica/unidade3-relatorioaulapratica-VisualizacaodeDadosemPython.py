# ROTEIRO DE AULA PR√ÅTICA
# NOME DA DISCIPLINA: LINGUAGEM DE PROGRAMA√á√ÉO
# Unidade: 3 ‚Äì Introdu√ß√£o √† An√°lise de Dados com Python
# Aula: 4 ‚Äì Visualiza√ß√£o de Dados em Python
# Author: Eduardo Akira da Rosa Miyamoto

#Passo 1: Conectar ao banco de dados SQLite e criar uma tabela
#Primeiro, voc√™ precisa estabelecer uma conex√£o com o banco de dados SQLite e carregar os dados relevantes para an√°lise.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import sqlite3

# Passo 1.1: Conectar ao banco de dados (ou criar, se n√£o existir)
conexao = sqlite3.connect('dados_vendas.db')

# Passo 1.2: Criar um cursor
cursor = conexao.cursor()

# Passo 1.3: Criar uma tabela (se n√£o existir)
cursor.execute('''
CREATE TABLE vendas1 (
id_venda INTEGER PRIMARY KEY AUTOINCREMENT,
data_venda DATE,
produto TEXT,
categoria TEXT,
valor_venda REAL
)
''')

# Passo 1.4: Inserir alguns dados
cursor.execute('''
INSERT INTO vendas1 (data_venda, produto, categoria, valor_venda) VALUES
('2023-01-01', 'Produto A', 'Eletr√¥nicos', 1500.00),
('2023-01-05', 'Produto B', 'Roupas', 350.00),
('2023-02-10', 'Produto C', 'Eletr√¥nicos', 1200.00),
('2023-03-15', 'Produto D', 'Livros', 200.00),
('2023-03-20', 'Produto E', 'Eletr√¥nicos', 800.00),
('2023-04-02', 'Produto F', 'Roupas', 400.00),
('2023-05-05', 'Produto G', 'Livros', 150.00),
('2023-06-10', 'Produto H', 'Eletr√¥nicos', 1000.00),
('2023-07-20', 'Produto I', 'Roupas', 600.00),
('2023-08-25', 'Produto J', 'Eletr√¥nicos', 700.00),
('2023-09-30', 'Produto K', 'Livros', 300.00),
('2023-10-05', 'Produto L', 'Roupas', 450.00),
('2023-11-15', 'Produto M', 'Eletr√¥nicos', 900.00),
('2023-12-20', 'Produto N', 'Livros', 250.00);
''')

# Passo 1.5: Confirmar as mudan√ßas
conexao.commit()

# ============================================================================
# PASSO 2: EXPLORAR E PREPARAR OS DADOS
# ============================================================================
print("\n" + "="*50)
print("PASSO 2: EXPLORANDO E PREPARANDO OS DADOS")
print("="*50)

# Carregar dados do banco SQLite para DataFrame
df_vendas = pd.read_sql_query('''
    SELECT * FROM vendas1 ORDER BY data_venda
''', conexao)

# Converter data para datetime
df_vendas['data_venda'] = pd.to_datetime(df_vendas['data_venda'])

# Criar colunas adicionais para an√°lise
df_vendas['mes'] = df_vendas['data_venda'].dt.month
df_vendas['mes_nome'] = df_vendas['data_venda'].dt.month_name()
df_vendas['trimestre'] = df_vendas['data_venda'].dt.quarter

print("üìä Informa√ß√µes gerais dos dados:")
print(f"Formato dos dados: {df_vendas.shape}")
print(f"Colunas: {list(df_vendas.columns)}")
print(f"Per√≠odo: {df_vendas['data_venda'].min()} at√© {df_vendas['data_venda'].max()}")

print("\nüìã Primeiras 5 linhas:")
print(df_vendas.head())

print("\nüìà Informa√ß√µes dos tipos de dados:")
print(df_vendas.info())

print("\nüìä Estat√≠sticas descritivas:")
print(df_vendas.describe())

print("\nüîç Verifica√ß√£o de dados faltantes:")
print(df_vendas.isnull().sum())

print("\nüì¶ Valores √∫nicos por coluna:")
print(f"Produtos √∫nicos: {df_vendas['produto'].nunique()}")
print(f"Categorias: {df_vendas['categoria'].unique()}")
print(f"Meses com vendas: {sorted(df_vendas['mes'].unique())}")

# ============================================================================
# PASSO 3: AN√ÅLISE DOS DADOS
# ============================================================================
print("\n" + "="*50)
print("PASSO 3: AN√ÅLISE DOS DADOS")
print("="*50)

# 3.1 An√°lise por categoria
print("\nüìä AN√ÅLISE POR CATEGORIA:")
vendas_por_categoria = df_vendas.groupby('categoria').agg({
    'valor_venda': ['sum', 'mean', 'count', 'min', 'max']
}).round(2)

vendas_por_categoria.columns = ['Total', 'M√©dia', 'Quantidade', 'M√≠nimo', 'M√°ximo']
print(vendas_por_categoria)

# Participa√ß√£o percentual
vendas_por_categoria['Participa√ß√£o_%'] = (vendas_por_categoria['Total'] / vendas_por_categoria['Total'].sum() * 100).round(1)
print(f"\nüí∞ Participa√ß√£o por categoria:")
print(vendas_por_categoria[['Total', 'Participa√ß√£o_%']])

# 3.2 An√°lise mensal
print("\nüìÖ AN√ÅLISE MENSAL:")
vendas_mensais = df_vendas.groupby(['mes', 'mes_nome']).agg({
    'valor_venda': ['sum', 'mean', 'count']
}).round(2)

vendas_mensais.columns = ['Total_Vendas', 'Ticket_M√©dio', 'Qtd_Vendas']
vendas_mensais = vendas_mensais.reset_index()
print(vendas_mensais)

# 3.3 Top produtos
print("\nüèÜ TOP 5 MAIORES VENDAS:")
top_vendas = df_vendas.nlargest(5, 'valor_venda')[['produto', 'categoria', 'valor_venda', 'data_venda']]
print(top_vendas)

# 3.4 An√°lise por trimestre
print("\nüìà AN√ÅLISE POR TRIMESTRE:")
vendas_trimestre = df_vendas.groupby('trimestre').agg({
    'valor_venda': ['sum', 'mean', 'count']
}).round(2)
vendas_trimestre.columns = ['Total', 'M√©dia', 'Quantidade']
print(vendas_trimestre)

# 3.5 M√©tricas principais
total_vendas = df_vendas['valor_venda'].sum()
ticket_medio = df_vendas['valor_venda'].mean()
melhor_categoria = vendas_por_categoria['Total'].idxmax()
melhor_mes = vendas_mensais.loc[vendas_mensais['Total_Vendas'].idxmax(), 'mes_nome']

print(f"\nüìä M√âTRICAS PRINCIPAIS:")
print(f"üí∞ Total de vendas: R$ {total_vendas:,.2f}")
print(f"üé´ Ticket m√©dio: R$ {ticket_medio:.2f}")
print(f"üì¶ Total de transa√ß√µes: {len(df_vendas)}")
print(f"ü•á Melhor categoria: {melhor_categoria}")
print(f"üìÖ Melhor m√™s: {melhor_mes}")

# ============================================================================
# PASSO 4: VISUALIZA√á√ÉO DOS DADOS
# ============================================================================
print("\n" + "="*50)
print("PASSO 4: VISUALIZA√á√ÉO DOS DADOS")
print("="*50)

# Configurar estilo
plt.style.use('default')
sns.set_palette("husl")

# Criar figura com subplots
fig, axes = plt.subplots(2, 3, figsize=(18, 12))
fig.suptitle('Dashboard de An√°lise de Vendas - 2023', fontsize=16, fontweight='bold')

# Gr√°fico 1: Vendas por categoria (Pizza)
ax1 = axes[0, 0]
vendas_cat_values = vendas_por_categoria['Total']
cores = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57']
wedges, texts, autotexts = ax1.pie(vendas_cat_values, labels=vendas_cat_values.index,
                                   autopct='%1.1f%%', startangle=90, colors=cores)
ax1.set_title('Vendas por Categoria', fontweight='bold')

# Gr√°fico 2: Evolu√ß√£o mensal
ax2 = axes[0, 1]
ax2.plot(vendas_mensais['mes'], vendas_mensais['Total_Vendas'],
         marker='o', linewidth=2, markersize=6, color='#FF6B6B')
ax2.set_title('Evolu√ß√£o das Vendas Mensais', fontweight='bold')
ax2.set_xlabel('M√™s')
ax2.set_ylabel('Valor (R$)')
ax2.grid(True, alpha=0.3)

# Gr√°fico 3: Vendas por categoria (Barras)
ax3 = axes[0, 2]
bars = ax3.bar(vendas_por_categoria.index, vendas_por_categoria['Total'], color=cores)
ax3.set_title('Total de Vendas por Categoria', fontweight='bold')
ax3.set_xlabel('Categoria')
ax3.set_ylabel('Valor Total (R$)')
ax3.tick_params(axis='x', rotation=45)

# Gr√°fico 4: Ticket m√©dio por categoria
ax4 = axes[1, 0]
ax4.bar(vendas_por_categoria.index, vendas_por_categoria['M√©dia'], color=cores)
ax4.set_title('Ticket M√©dio por Categoria', fontweight='bold')
ax4.set_xlabel('Categoria')
ax4.set_ylabel('Ticket M√©dio (R$)')
ax4.tick_params(axis='x', rotation=45)

# Gr√°fico 5: Quantidade de vendas por m√™s
ax5 = axes[1, 1]
ax5.bar(vendas_mensais['mes'], vendas_mensais['Qtd_Vendas'], color='#4ECDC4')
ax5.set_title('Quantidade de Vendas por M√™s', fontweight='bold')
ax5.set_xlabel('M√™s')
ax5.set_ylabel('Quantidade')

# Gr√°fico 6: Boxplot valores por categoria
ax6 = axes[1, 2]
df_vendas.boxplot(column='valor_venda', by='categoria', ax=ax6)
ax6.set_title('Distribui√ß√£o dos Valores por Categoria', fontweight='bold')
ax6.set_xlabel('Categoria')
ax6.set_ylabel('Valor (R$)')
plt.suptitle('')  # Remove t√≠tulo autom√°tico do boxplot

plt.tight_layout()
plt.show()

print("‚úÖ Visualiza√ß√µes geradas com sucesso!")

# ============================================================================
# PASSO 5: CONCLUS√ÉO E AN√ÅLISE DE INSIGHTS
# ============================================================================
print("\n" + "="*50)
print("PASSO 5: CONCLUS√ÉO E AN√ÅLISE DE INSIGHTS")
print("="*50)

print("üí° PRINCIPAIS INSIGHTS:")
print("-" * 30)

# Insight 1: Categoria dominante
categoria_lider = vendas_por_categoria['Total'].idxmax()
participacao_lider = vendas_por_categoria.loc[categoria_lider, 'Participa√ß√£o_%']
print(f"üéØ 1. {categoria_lider} √© a categoria l√≠der com {participacao_lider}% das vendas")

# Insight 2: Sazonalidade
mes_maior_venda = vendas_mensais.loc[vendas_mensais['Total_Vendas'].idxmax()]
mes_menor_venda = vendas_mensais.loc[vendas_mensais['Total_Vendas'].idxmin()]
print(f"üìÖ 2. Maior volume em {mes_maior_venda['mes_nome']} (R$ {mes_maior_venda['Total_Vendas']:,.2f})")
print(f"üìÖ 3. Menor volume em {mes_menor_venda['mes_nome']} (R$ {mes_menor_venda['Total_Vendas']:,.2f})")

# Insight 3: Ticket m√©dio
categoria_maior_ticket = vendas_por_categoria['M√©dia'].idxmax()
maior_ticket = vendas_por_categoria.loc[categoria_maior_ticket, 'M√©dia']
print(f"üé´ 4. {categoria_maior_ticket} tem o maior ticket m√©dio: R$ {maior_ticket:.2f}")

# Insight 4: Performance geral
print(f"üìä 5. Performance geral: {len(df_vendas)} vendas geraram R$ {total_vendas:,.2f}")

print(f"\nüìã RECOMENDA√á√ïES PARA A EMPRESA:")
print("-" * 35)

print(f"‚úÖ 1. FORTALECER {categoria_lider}:")
print(f"   - Investir em marketing desta categoria")
print(f"   - Aumentar variedade de produtos")
print(f"   - Negociar melhores condi√ß√µes com fornecedores")

categoria_fraca = vendas_por_categoria['Total'].idxmin()
print(f"\nüìà 2. DESENVOLVER {categoria_fraca}:")
print(f"   - Criar promo√ß√µes espec√≠ficas")
print(f"   - Analisar motivos da baixa performance")
print(f"   - Considerar parcerias estrat√©gicas")

print(f"\nüìÖ 3. OTIMIZAR SAZONALIDADE:")
print(f"   - Preparar estoque para {mes_maior_venda['mes_nome']}")
print(f"   - Criar campanhas especiais em {mes_menor_venda['mes_nome']}")
print(f"   - Planejar promo√ß√µes baseadas no hist√≥rico")

print(f"\nüí∞ 4. AUMENTAR TICKET M√âDIO:")
print(f"   - Implementar vendas cruzadas")
print(f"   - Oferecer combos e pacotes")
print(f"   - Treinar equipe de vendas")

print(f"\nüìä 5. MONITORAMENTO CONT√çNUO:")
print(f"   - Acompanhar m√©tricas mensalmente")
print(f"   - Criar alertas para quedas de performance")
print(f"   - Expandir an√°lise para mais per√≠odos")

# Fechar conex√£o com o banco
conexao.close()

print("\n" + "="*50)
print("‚úÖ AN√ÅLISE COMPLETA FINALIZADA COM SUCESSO!")
print("üìä Relat√≥rio salvo e gr√°ficos gerados")
print("üíº Insights e recomenda√ß√µes documentados")
print("="*50)
